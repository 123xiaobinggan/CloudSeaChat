{"version":3,"names":["_sfc_main","data","searchQuery","posts","_id","account_id","username","avatar","content","media","type","url","post_type","source_post","post_id","ip","create_time","like_count","liked","comment_count","forward_count","visibility","tags","status","showComments","comments","date","showReplyInput","showReply","replies","reply_username","reply_comment_id","filteredPosts","newPostContent","newComment","newReply","newReplyReply","user","description","replyPlaceholder","last_showInput","mounted","_this","common_vendor","PubSub","subscribe","msg","Object","keys","forEach","key","fetchPosts","unshift","watch","deep","handler","filterPosts","newVal","methods","_this2","_asyncToGenerator2","_regeneratorRuntime2","mark","_callee","res","_res$result$data","total_count","db","likeRes","likedPostIds","wrap","_callee$","_context","prev","next","er","callFunction","name","page","Math","floor","length","page_size","sent","result","code","database","collection","where","target_id","command","in","map","item","get","post","includes","concat","_toConsumableArray2","index","__f__","t0","stop","_this3","filter","toLowerCase","previewMedia","currentIndex","sources","current","to_post","_this4","share_post","setTimeout","publish","navigateTo","confirmDeletePost","_this5","showModal","title","success","confirm","deletePost","_this6","_callee2","_callee2$","_context2","showToast","icon","p","like","comment","reply","_this7","_callee3","_callee3$","_context3","abrupt","message","toggleComments","selectedPost","fetchComments","_this8","_callee4","likedCommentIds","_iterator","_step","likeRes2","likedReplyIds","_callee4$","_context4","comments_count","_createForOfIteratorHelper2","s","n","done","value","err","e","f","submitComment","_this9","_callee5","_callee5$","_context5","trim","formatDate","Date","pad","toString","padStart","year","getFullYear","month","getMonth","day","getDate","hours","getHours","minutes","getMinutes","toggleReplyInput","$set","wx","createPage","MiniProgramPage"],"sources":["index.vue","cGFnZXMvaW5kZXgvaW5kZXgudnVl"],"sourcesContent":["<template>\r\n  <view class=\"home-page\" @tap=\"resetReplyTarget\">\r\n    <!-- 顶部输入框和发帖按钮 -->\r\n    <view class=\"top-bar\">\r\n      <view class=\"search-wrapper\">\r\n        <image src=\"/static/index/搜索.png\" class=\"search-icon\" />\r\n        <input v-model=\"searchQuery\" placeholder=\"搜索帖子...\" class=\"search-input\" @input=\"filterPosts\" />\r\n      </view>\r\n      <image src=\"/static/index/发帖.png\" class=\"post-icon\" @tap=\"to_post(null,0)\" />\r\n    </view>\r\n\r\n    <!-- 帖子头 -->\r\n    <view v-for=\"post in filteredPosts\" :key=\"post._id\" class=\"post\">\r\n      <view class=\"post-header\">\r\n        <image :src=\"post.avatar\" class=\"avatar\" />\r\n        <view class=\"user-info\">\r\n          <text class=\"username\">{{ post.username }}</text>\r\n          <br/>\r\n          <text class=\"meta\">{{ formatDate(post.create_time) }} · {{ post.ip }}</text>\r\n        </view>\r\n        <view v-if=\"post.account_id == user.account_id\" class=\"post-actions\">\r\n          <image src=\"/static/index/垃圾桶.png\" class=\"action-icon\" @tap=\"()=>confirmDeletePost(post)\" />\r\n        </view>\r\n      </view>\r\n\r\n      <!-- 展示普通内容或是转发内容 -->\r\n      <view class=\"post-content\">\r\n        <view v-if=\"post.post_type==0\">\r\n          <text>{{ post.content }}</text>\r\n          <view v-if=\"post.media.length > 1\">\r\n            <view\r\n              v-if=\"Array.isArray(post.media) && post.media.length\"\r\n              :class=\"['media-grid', 'media-count-' + post.media.length]\"\r\n            >\r\n              <view\r\n                v-for=\"(media, mediaIndex) in post.media\"\r\n                :key=\"mediaIndex\"\r\n                class=\"media-item\"\r\n                @tap=\"()=>previewMedia(post.media, mediaIndex)\"\r\n              >\r\n                <image v-if=\"media.type === 'image'\" :src=\"media.url\" class=\"post-media\" mode=\"aspectFill\" />\r\n                <video v-else-if=\"media.type === 'video'\" :src=\"media.url\" class=\"post-media\" controls />\r\n              </view>\r\n            </view>\r\n          </view>\r\n          <view v-else-if=\"post.media.length == 1\">\r\n            <view class=\"one-media-item\" @tap=\"()=>previewMedia(post.media, 0)\">\r\n              <image v-if=\"post.media[0].type === 'image'\" :src=\"post.media[0].url\" class=\"post-one-media\" mode=\"widthFix\" />\r\n              <video v-else-if=\"post.media[0].type === 'video'\" :src=\"post.media[0].url\" class=\"post-one-media\" controls />\r\n            </view>\r\n          </view>\r\n        </view>\r\n\r\n        <!-- 转发 -->\r\n        <view v-else>\r\n          <!-- 当前用户的附言 -->\r\n          <text>{{ post.content }}</text>\r\n          <!-- 嵌套展示原帖（source_post） -->\r\n          <view class=\"source-post-card\">\r\n            <view class=\"source-header\">\r\n              <image :src=\"post.source_post.avatar\" class=\"avatar\" />\r\n              <view class=\"user-info\">\r\n                <text class=\"username\">{{ post.source_post.username }}</text>\r\n                <br/>\r\n                <text class=\"meta\">{{ formatDate(post.source_post.create_time) }} · {{ post.source_post.ip }}</text>\r\n              </view>\r\n            </view>\r\n\r\n            <view class=\"source-content\">\r\n              <view class=\"source-text\">\r\n                <text>{{ post.source_post.content }}</text>\r\n              </view>\r\n              <view v-if=\"post.source_post.media.length > 1\">\r\n                <view\r\n                  v-if=\"Array.isArray(post.source_post.media) && post.source_post.media.length\"\r\n                  :class=\"['media-grid', 'media-count-' + post.source_post.media.length]\"\r\n                >\r\n                  <view\r\n                    v-for=\"(media, mediaIndex) in post.source_post.media\"\r\n                    :key=\"mediaIndex\"\r\n                    class=\"media-item\"\r\n                    @tap=\"()=>previewMedia(post.source_post.media, mediaIndex)\"\r\n                  >\r\n                    <image v-if=\"media.type === 'image'\" :src=\"media.url\" class=\"post-media\" mode=\"aspectFill\" />\r\n                    <video v-else-if=\"media.type === 'video'\" :src=\"media.url\" class=\"post-media\" controls />\r\n                  </view>\r\n                </view>\r\n              </view>\r\n              <view v-else-if=\"post.source_post.media.length == 1\">\r\n                <view class=\"one-media-item\" @tap=\"()=>previewMedia(post.source_post.media, 0)\">\r\n                  <image v-if=\"post.source_post.media[0].type === 'image'\" :src=\"post.source_post.media[0].url\" class=\"post-one-media\" mode=\"widthFix\" />\r\n                  <video v-else-if=\"post.source_post.media[0].type === 'video'\" :src=\"post.source_post.media[0].url\" class=\"post-one-media\" controls />\r\n                </view>\r\n              </view>\r\n            </view>\r\n          </view>\r\n        </view>\r\n      </view>\r\n\r\n      <!-- 帖子操作按钮 -->\r\n      <view class=\"post-actions\">\r\n        <view class=\"action like-action\" @tap=\"()=>like(post,post,null,null,0)\">\r\n          <image \r\n          :src=\"post.liked ? '/static/index/已赞.png' : '/static/index/赞.png'\" \r\n          class=\"action-icon\" \r\n          :class=\"{ 'like-heart-animated': post.liked }\" />\r\n\r\n          <text>{{ post.like_count }}</text>\r\n        </view>\r\n        <view class=\"action\" @tap=\"()=>toggleComments(post)\">\r\n          <image src=\"/static/index/评论.png\" class=\"action-icon\" />\r\n          <text>{{ post.comments_count }}</text>\r\n        </view>\r\n        <view class=\"action\" @tap=\"()=>to_post(post,1)\">\r\n          <image src=\"/static/index/转发.png\" class=\"action-icon\" />\r\n          <text>{{ post.forward_count || 0 }}</text>\r\n        </view>\r\n      </view>\r\n      \r\n      <!-- 帖子评论 -->\r\n      <view v-if=\"post.showComments\" class=\"comments\">\r\n        <view v-for=\"comment in post.comments\" :key=\"comment._id\" class=\"comment\" >\r\n          <image :src=\"comment.avatar\" class=\"comment-avatar\" />\r\n          <view class=\"comment-content\">\r\n            <view class=\"comment-header\">\r\n              <view class=\"comment-info\">\r\n                <text class=\"comment-user\">{{ comment.username }}</text>\r\n                <text class=\"comment-meta\">{{ formatDate(comment.date) }} · {{ comment.ip }}</text>\r\n              </view>\r\n\r\n              <view class=\"comment-actions\">\r\n                <view class=\"like-action\" @tap.stop=\"()=>like(comment,post,comment,null,1)\">\r\n                  <image :src=\"comment.liked ? '/static/index/已赞.png' : '/static/index/赞.png'\" class=\"action-icon\" />\r\n                  <text>{{ comment.like_count }}</text>\r\n                </view>\r\n              </view>\r\n            </view>\r\n            <text class=\"comment-text\">{{ comment.content }}</text>\r\n\r\n            <view class=\"reply-action\" @tap.stop=\"()=>toggleReplyInput(comment)\">\r\n                  <text style=\"color:grey \">回复</text>\r\n            </view>\r\n\r\n            <!-- 回复comment-->\r\n            <view v-if=\"comment.showReplyInput\" class=\"reply-input-wrapper\">\r\n              <input\r\n                v-model=\"newReply\"\r\n                class=\"reply-input\"\r\n                :placeholder=\"'回复'+ comment.username + '...' \"\r\n              />\r\n              <button class=\"reply-button\" @tap=\"()=>submitComment(post,comment,null,1,newReply)\">回复</button>\r\n            </view>\r\n\r\n            <!-- 展示回复 -->\r\n            <view v-if=\"comment.replies.length && !comment.showReply\"  class=\"showReply\" @tap.stop=\"comment.showReply = true\">\r\n              <text>{{ comment.replies.length }}条回复</text>  \r\n            </view>\r\n\r\n            <!-- 回复列表 -->\r\n            <view v-if=\"comment.showReply\">\r\n              <view v-for=\"reply in comment.replies\" :key=\"reply._id\" class=\"reply\" >\r\n              <image :src=\"reply.avatar\" class=\"reply-avatar\" />  \r\n                <view class=\"reply-content\">\r\n                  <view class=\"reply-header\">\r\n                    <view class=\"reply-info\">\r\n                      <text class=\"reply-user\">{{ reply.username }}</text>\r\n                      <text class=\"reply-meta\">{{ formatDate(reply.date) }} · {{ reply.ip }}</text>\r\n                    </view>\r\n                    <view class=\"reply-action\">\r\n                      <view class=\"reply-like-action\" @tap.stop=\"()=>like(reply,post,comment,reply,2)\">\r\n                        <image :src=\"reply.liked ? '/static/index/已赞.png' : '/static/index/赞.png'\" class=\"action-icon\" />\r\n                        <text>{{ reply.like_count }}</text>\r\n                      </view>\r\n                    </view>\r\n                  </view>\r\n\r\n                  <!-- 评论内容 -->\r\n                  <text class=\"reply-text\">\r\n                    <text v-if=\"reply.reply_username\">\r\n                      回复\r\n                      <text class=\"relpy_username\">{{ reply.reply_username }}: </text>\r\n                    </text>\r\n                    {{ reply.content }}\r\n                  </text>\r\n\r\n                  <!--回复按钮-->\r\n                  <view class=\"reply-action\" @tap.stop=\"()=>toggleReplyInput(reply)\">\r\n                    <text>回复</text>\r\n                  </view>\r\n\r\n                  <!-- 回复输入框 --><!-- 回复reply -->\r\n                  <view v-if=\"reply.showReplyInput\" class=\"reply-input-wrapper\">\r\n                    <input\r\n                      v-model=\"newReplyReply\"\r\n                      class=\"reply-input\"\r\n                      :placeholder=\" '回复' + reply.username + '...' \"\r\n                    />\r\n                    <button class=\"reply-button\" @tap=\"()=>submitComment(post,comment,reply,2,newReplyReply)\">回复</button>\r\n                  </view>\r\n\r\n                </view>\r\n\r\n              </view>\r\n            </view>\r\n          </view>\r\n        </view>\r\n\r\n\r\n        <!--评论输入框--><!-- 回复post -->\r\n        <view class=\"comment-input-wrapper\" @tap.stop>\r\n          <input\r\n            v-model=\"newComment\"\r\n            class=\"comment-input\"\r\n            placeholder=\"发表评论...\"\r\n          />\r\n          <button class=\"reply-button\" @tap=\"()=>submitComment(post,null,null,0,newComment)\">回复</button>\r\n        </view>\r\n      </view>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport PubSub from 'pubsub-js';\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      posts: [\r\n        {\r\n          _id: '1',\r\n          account_id: '1',\r\n          username: '用户1',\r\n          avatar: '/static/info/头像.png',\r\n          content: '这是一个示例帖子内容。今天天气很好，适合出去运动。',\r\n          media: [\r\n            { type: 'image', url: \"https://tse3.mm.bing.net/th/id/OIP.JTyY7rEetMPSlOzwUzmbcgHaLH?rs=1&pid=ImgDetMain\" },\r\n            { type: 'image', url: \"https://tse3.mm.bing.net/th/id/OIP.JTyY7rEetMPSlOzwUzmbcgHaLH?rs=1&pid=ImgDetMain\" }\r\n          ],\r\n          post_type: 1,\r\n          source_post: {\r\n            post_id: \"681f84cece5ec90ca63069c7\",\r\n            account_id: \"小饼干\",\r\n            username: \"小饼干\",\r\n            avatar: \"http://tmp/ZALRm4NzCetM97e3a051b3dcb8b0006f918a3f9484ec.png\",\r\n            content: \"即见君子，云胡不喜\",\r\n            media: [\r\n              { type: 'image', url: \"https://img-s-msn-com.akamaized.net/tenant/amp/entityid/AA1DDdR2.img?w=768&h=432&m=6&x=602&y=48&s=157&d=157\" },\r\n              { type: 'image', url: \"https://img-s-msn-com.akamaized.net/tenant/amp/entityid/AA1DDdR2.img?w=768&h=432&m=6&x=602&y=48&s=157&d=157\" }\r\n            ],\r\n            ip: \"厦门\",\r\n            create_time: \"2025-05-10T16:54:42.476Z\",\r\n          },\r\n          like_count: 10,\r\n          liked: false,\r\n          comment_count: 5,\r\n          forward_count: 3,\r\n          visibility: 0,\r\n          create_time: '2024-09-10 12:00:00',\r\n          ip: '北京',\r\n          tags: ['标签1', '标签2'],\r\n          status: 0,\r\n          showComments: false,\r\n          comments: [\r\n            {\r\n              _id: '1',\r\n              post_id: '1',\r\n              account_id: '1',\r\n              username: '用户1',\r\n              avatar: '/static/info/头像.png',\r\n              content: '今天天气很好，适合出去运动，你们觉得呢？',\r\n              like_count: 2,\r\n              liked: false,\r\n              date: '2024-09-10 12:00:00',\r\n              ip: \"厦门\",\r\n              showReplyInput: false,\r\n              showReply: false,\r\n              replies: [\r\n                {\r\n                  account_id: '1',\r\n                  username: '用户1',\r\n                  avatar: '/static/info/头像.png',\r\n                  content: '今天天气很好，适合出去运动，你们觉得呢？',\r\n                  like_count: 2,\r\n                  liked: false,\r\n                  reply_username: '小饼干',\r\n                  reply_comment_id: '1',\r\n                  date: '2024-09-10 12:00:00',\r\n                  ip: \"厦门\",\r\n                }\r\n              ]\r\n            }\r\n          ],\r\n        }\r\n      ],\r\n      filteredPosts: [],\r\n      newPostContent: '',\r\n      newComment: '',\r\n      newReply: '',\r\n      newReplyReply: '',\r\n      user: {\r\n        account_id: '',\r\n        username: '未登录',\r\n        description: '这个人很懒，什么都没有留下',\r\n        avatar: '/static/info/头像.png',\r\n      },\r\n      replyPlaceholder: '发表评论...', // 回复框的占位符\r\n      last_showInput: null, // 记录上一个显示的输入框\r\n    };\r\n  },\r\n  mounted() {\r\n    PubSub.subscribe('to_index', (msg, user) => {\r\n      Object.keys(this.user).forEach((key) => {\r\n        if (key in user) {\r\n          this.user[key] = user[key];\r\n        } \r\n      })\r\n    });\r\n    this.fetchPosts();\r\n    PubSub.subscribe('return_index', (msg, data) => {\r\n      this.posts.unshift(data); // 将新帖子添加到列表开头\r\n    });\r\n  },\r\n  watch: {\r\n    posts: {\r\n      deep: true,\r\n      handler() {\r\n        this.filterPosts()\r\n      }\r\n    },\r\n    user: {\r\n      deep: true,\r\n      handler(newVal) {\r\n        this.posts = [];\r\n        this.fetchPosts();\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    //加载更多帖子\r\n    async fetchPosts() {\r\n      try {\r\n        // 调用云函数获取帖子\r\n        const res = await uniCloud.callFunction({\r\n          name: 'get_posts',\r\n          data: {\r\n            page: 1 + Math.floor(this.posts.length / 10), // 当前页码\r\n            page_size: 20 // 每页显示的帖子数量\r\n          }\r\n        });\r\n\r\n        // 判断云函数是否成功返回数据\r\n        if (res.result.code === 0) {\r\n          // 成功获取帖子\r\n          const { posts, total_count } = res.result.data;\r\n\r\n          if (this.user.account_id) //如果用户已登录，获取用户点赞状态\r\n          {\r\n            const db = uniCloud.database();\r\n            const likeRes = await db.collection('user-liked').where({\r\n              account_id: this.user.account_id,\r\n              target_id: db.command.in(posts.map(item => item._id)),\r\n              liked: true\r\n            }).get();\r\n            const likedPostIds = likeRes.result.data.map(item => item.target_id);\r\n            posts.forEach(post => {\r\n              post.liked = likedPostIds.includes(post._id);\r\n            });\r\n          }\r\n          this.posts = [...this.posts, ...posts];\r\n\r\n        } else {\r\n          console.error('获取帖子失败:', res.result.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('获取帖子时发生错误:', error);\r\n      }\r\n    },\r\n    // 过滤帖子\r\n    filterPosts() {\r\n      this.filteredPosts = this.posts.filter(post =>\r\n        post.content.toLowerCase().includes(this.searchQuery.toLowerCase())\r\n      );\r\n    },\r\n    // 预览媒体\r\n    previewMedia(media, currentIndex) {\r\n      uni.previewMedia({\r\n        sources: media.map(item => ({\r\n          url: item.url,\r\n          type: item.type\r\n        })),\r\n        current: currentIndex // 当前预览的媒体索引\r\n      });\r\n    },\r\n    //跳转到发帖页面\r\n    to_post(post, type) {\r\n      let share_post = {}\r\n      if (post) { // 如果是转发帖子{\r\n        if (post.post_type == 1 && post.source_post) {\r\n          share_post = post.source_post; // 获取原帖信息\r\n        }\r\n        else {\r\n          share_post = post; // 获取当前帖子信息\r\n        }\r\n      }\r\n      setTimeout(() => {\r\n        PubSub.publish('to_post', {\r\n          share_post: share_post,\r\n          type: type,\r\n          account_id: this.user.account_id,\r\n          username: this.user.username,\r\n          avatar: this.user.avatar\r\n        });\r\n      }, 500); // 延迟 500ms 确保目标页面加载完成\r\n      uni.navigateTo({ url: '/pages/post/post' });\r\n    },\r\n    // 确认删除帖子\r\n    confirmDeletePost(post) {\r\n      uni.showModal({\r\n        title: '确认删除',\r\n        content: '确定要删除这条帖子吗？',\r\n        success: (res) => {\r\n          if (res.confirm) {\r\n            this.deletePost(post); // 调用删除函数\r\n          }\r\n        }\r\n      });\r\n    },\r\n    //删除帖子\r\n    async deletePost(post) {\r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'delete_post',\r\n          data: { post_id: post._id }\r\n        });\r\n        if (res.result.code === 200) {\r\n          uni.showToast({ title: '删除成功', icon: 'success' });\r\n          this.posts = this.posts.filter(p => p._id !== post._id); // 从列表中移除已删除的帖子\r\n        } else {\r\n          uni.showToast({ title: '删除失败', icon: 'none' });\r\n        }\r\n      } catch (error) {\r\n        console.error('删除失败:', error);\r\n        uni.showToast({ title: '网络错误', icon: 'none' });\r\n      }\r\n    },\r\n    //点赞\r\n    async like(item, post, comment, reply, type) {\r\n      if (!this.user.account_id) {\r\n        uni.showToast({ title: '请登录', icon: 'none' });\r\n        return;\r\n      }\r\n      item.liked = !item.liked; // 切换点赞状态\r\n      item.like_count += item.liked ? 1 : -1;\r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'user-liked',\r\n          data: {\r\n            target_id: item._id,\r\n            post: post,\r\n            comment: comment,\r\n            reply: reply,\r\n            account_id: this.user.account_id,\r\n            type: type\r\n          }\r\n        });\r\n        \r\n        if(res.result.msg === \"请登录\")\r\n        {\r\n          uni.showToast({\r\n            title: '请登录',\r\n            icon: 'none'\r\n          });\r\n        }\r\n        else if(res.result.msg != \"success\") {\r\n          item.liked = !item.liked; // 还原点赞状态\r\n          item.like_count -= item.liked ? -1 : 1;\r\n          uni.showToast({\r\n            title: res.result.message || '操作失败',\r\n            icon: 'none'\r\n          });\r\n        }\r\n      } catch (err) {\r\n        console.error('点赞失败:', err);\r\n        uni.showToast({\r\n          title: '网络错误',\r\n          icon: 'none'\r\n        });\r\n      }\r\n    },\r\n    //展示评论\r\n    toggleComments(selectedPost) {\r\n      this.filteredPosts.forEach(post => {\r\n        if (post._id === selectedPost._id) {\r\n          post.showComments = !post.showComments; // 切换当前帖子的评论显示状态\r\n        } else {\r\n          post.showComments = false; // 收起其他帖子的评论\r\n        }\r\n      });\r\n      if(!selectedPost.comments){\r\n      this.fetchComments(selectedPost); // 获取当前帖子的评论\r\n      }\r\n    },\r\n    //获取评论\r\n    async fetchComments(post) {\r\n      try{\r\n        const res = await uniCloud.callFunction({\r\n          name: 'get_comments',\r\n          data: {\r\n            post_id: post._id // 传递帖子 ID\r\n          } \r\n        });\r\n        \r\n        if(res.result.msg == \"success\")\r\n        {\r\n          post.comments = res.result.data; // 更新评论列表 \r\n          post.comments_count = post.comments.length; // 更新评论数量\r\n          if(this.user.account_id)//如果用户已登录，获取用户点赞状态\r\n          {\r\n            const db = uniCloud.database();\r\n            const likeRes = await db.collection('user-liked').where({\r\n              account_id: this.user.account_id,\r\n              target_id: db.command.in(post.comments.map(item => item._id)),\r\n              liked: true \r\n            }).get();\r\n            const likedCommentIds = likeRes.result.data.map(item => item.target_id);\r\n            let replies = [];\r\n            for (const comment of post.comments) \r\n            {\r\n              comment.liked = likedCommentIds.includes(comment._id);\r\n              replies = replies.concat(comment.replies);\r\n            }\r\n            if(replies.length>0)\r\n            {\r\n              const likeRes = await db.collection('user-liked').where({\r\n                account_id: this.user.account_id,\r\n                target_id: db.command.in(replies.map(item => item._id)),\r\n                liked: true\r\n              }).get();\r\n              const likedReplyIds = likeRes.result.data.map(item => item.target_id);\r\n              post.comments.forEach(comment => {\r\n                comment.replies.forEach(reply => {\r\n                  reply.liked = likedReplyIds.includes(reply._id);\r\n                });\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }catch (error) {\r\n        console.error('获取评论失败:', error);\r\n      }\r\n    },   \r\n    // 提交评论或回复\r\n    async submitComment(post,comment,reply,type,content) {\r\n      if ((!this.newComment.trim() && type==0) || (!this.newReply.trim() && type==1) || (!this.newReplyReply.trim() && type==2)) \r\n      {\r\n        uni.showToast({ title: '评论不能为空', icon: 'none' });\r\n        return;\r\n      }\r\n      if(!this.user.account_id){\r\n        uni.showToast({ title: '请登录', icon: 'none' });\r\n        return;\r\n      }\r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'submit_comment',\r\n          data:{\r\n            user:this.user,\r\n            post: post,\r\n            comment: comment,\r\n            reply:reply,\r\n            type: type,\r\n            content: content,\r\n          } \r\n        });\r\n\t\t    \r\n        if(res.result.msg == \"success\"){\r\n          if(type==0){\r\n            post.comments_count += 1; // 更新评论数量\r\n            post.comments.unshift(res.result.data);\r\n            this.newComment = ''; // 清空输入框\r\n          } \r\n          else{\r\n            comment.replies.unshift(res.result.data);\r\n            if(reply)\r\n            this.newReplyReply = '',\r\n            reply.showReplyInput=false; // 清空输入框\r\n            else\r\n            this.newReply = '',\r\n            comment.showReplyInput=false; // 清空输入框\r\n          }\r\n          uni.showToast({ title: '评论成功', icon: 'success' });\r\n        } \r\n      }catch (error) {\r\n        uni.showToast({ title: '评论失败', icon: 'none' }); \r\n      }\r\n    },\r\n    //时间格式化函数\r\n    formatDate(date) {\r\n      date= new Date(date);\r\n      const pad = n => n.toString().padStart(2, '0');\r\n      const year = date.getFullYear();\r\n      const month = pad(date.getMonth() + 1);\r\n      const day = pad(date.getDate());\r\n      const hours = pad(date.getHours());\r\n      const minutes = pad(date.getMinutes());\r\n      return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n    },\r\n    // 切换回复输入框的显示状态\r\n    toggleReplyInput(item) {\r\n      this.$set(item, 'showReplyInput', !item.showReplyInput);\r\n      if(this.last_showInput && this.last_showInput !== item) {\r\n        this.last_showInput.showReplyInput = false; // 隐藏上一个输入框\r\n      }\r\n      this.last_showInput = item; // 更新上一个输入框\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url(index.css);\r\n</style>","import MiniProgramPage from 'D:/CODE/vue/canteen_program/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"mappings":"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","ignoreList":[]}