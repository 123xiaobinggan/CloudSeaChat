{"version":3,"file":"index.js","sources":["pages/index/index.vue","../../../H-builderx/HBuilderX/plugins/uniapp-cli-vite/uniPage:/cGFnZXMvaW5kZXgvaW5kZXgudnVl"],"sourcesContent":["<template>\r\n  <view class=\"home-page\">\r\n    <!-- 顶部输入框和发帖按钮 -->\r\n    <view v-if=\"show_top_bar\" :class=\"['top-bar', {'no-shadow': isAtTop}]\">\r\n      <view class=\"search-wrapper\">\r\n        <image src=\"/static/index/搜索.png\" class=\"search-icon\" />\r\n        <input v-model=\"searchQuery\" placeholder=\"搜索帖子...\" class=\"search-input\" @input=\"filterPosts()\" />\r\n      </view>\r\n      <image src=\"/static/index/发帖.png\" class=\"post-icon\" @tap=\"to_post(null,0)\" />\r\n  </view>\r\n\r\n    <!-- 帖子头 -->\r\n    <view v-for=\"(post,postIndex) in filteredPosts\" :key=\"post._id\" class=\"post\">\r\n      <view class=\"post-header\">\r\n        <image :src=\"post.avatar\" class=\"avatar\" mode=\"aspectFill\" @tap=\"to_personal_info(post)\" />\r\n        <view class=\"user-info\">\r\n          <text class=\"username\">{{ post.username }}</text>\r\n          <br/>\r\n          <text class=\"meta\">{{ formatDate(post.create_time) }} · {{ post.ip }}</text>\r\n        </view>\r\n        <view v-if=\"post.account_id == user.account_id || user.admin\" class=\"post-actions\">\r\n          <image src=\"/static/index/垃圾桶.png\" class=\"action-icon\" @tap=\"()=>confirmDeletePost(post)\" />\r\n        </view>\r\n      </view>\r\n\r\n      <!-- 展示普通内容或是转发内容 -->\r\n      <view class=\"post-content\">\r\n        <view v-if=\"post.post_type==0\">\r\n          <text>{{ post.content }}</text>\r\n          <view v-if=\"post.media.length > 1\">\r\n            <view\r\n              v-if=\"Array.isArray(post.media) && post.media.length\"\r\n              :class=\"['media-grid', 'media-count-' + post.media.length]\"\r\n            >\r\n              <view\r\n                v-for=\"(media, mediaIndex) in post.media\"\r\n                :key=\"mediaIndex\"\r\n                class=\"media-item\"\r\n                @tap=\"()=>previewMedia(post.media, mediaIndex)\"\r\n              >\r\n                <image v-if=\"media.type === 'image'\" :src=\"media.url\" class=\"post-media\" mode=\"aspectFill\" />\r\n                <video v-else-if=\"media.type === 'video'\" :src=\"media.url\" class=\"post-media\" controls />\r\n              </view>\r\n            </view>\r\n          </view>\r\n          <view v-else-if=\"post.media.length == 1\">\r\n            <view class=\"one-media-item\" @tap=\"()=>previewMedia(post.media, 0)\">\r\n              <image v-if=\"post.media[0].type === 'image'\" :src=\"post.media[0].url\" class=\"post-one-media\" mode=\"widthFix\" />\r\n              <video v-else-if=\"post.media[0].type === 'video'\" \r\n                :src=\"post.media[0].url\"  \r\n                :autoplay=\"false\" \r\n                controls \r\n              />\r\n            </view>\r\n          </view>\r\n        </view>\r\n\r\n        <!-- 转发 -->\r\n        <view v-else>\r\n          <!-- 当前用户的附言 -->\r\n          <text>{{ post.content }}</text>\r\n          <!-- 嵌套展示原帖（source_post） -->\r\n          <view class=\"source-post-card\" @tap=\"to_source_post(post)\">\r\n            <view class=\"source-header\">\r\n              <image v-if=\"post.source_post.avatar\" :src=\"post.source_post.avatar\" class=\"avatar\" mode=\"aspectFill\" />\r\n              <view class=\"user-info\">\r\n                <text v-if=\"post.source_post.username\" class=\"username\">{{ post.source_post.username }}</text>\r\n                <br/>\r\n                <text v-if=\"post.source_post.create_time\" class=\"meta\">{{ formatDate(post.source_post.create_time) }} · {{ post.source_post.ip }}</text>\r\n              </view>\r\n            </view>\r\n\r\n            <view class=\"source-content\">\r\n              <view v-if=\"post.source_post.content\" class=\"source-text\">\r\n                <text>{{ post.source_post.content }}</text>\r\n              </view>\r\n              <view v-if=\"post.source_post.media\">\r\n                <view v-if=\"post.source_post.media.length > 1\">\r\n                  <view\r\n                    v-if=\"Array.isArray(post.source_post.media) && post.source_post.media.length\"\r\n                    :class=\"['media-grid', 'media-count-' + post.source_post.media.length]\"\r\n                  >\r\n                    <view\r\n                      v-for=\"(media, mediaIndex) in post.source_post.media\"\r\n                      :key=\"mediaIndex\"\r\n                      class=\"media-item\"\r\n                      @tap=\"()=>previewMedia(post.source_post.media, mediaIndex)\"\r\n                    >\r\n                      <image v-if=\"media.type === 'image'\" :src=\"media.url\" class=\"post-media\" mode=\"aspectFill\" />\r\n                      <video v-else-if=\"media.type === 'video'\" :src=\"media.url\" class=\"post-media\" controls />\r\n                    </view>\r\n                  </view>\r\n                </view>\r\n                <view v-else-if=\"post.source_post.media.length == 1\">\r\n                  <view class=\"one-media-item\" @tap=\"()=>previewMedia(post.source_post.media, 0)\">\r\n                    <image v-if=\"post.source_post.media[0].type === 'image'\" \r\n                      :src=\"post.source_post.media[0].url\" \r\n                      class=\"post-one-media\"\r\n                      mode=\"widthFix\" \r\n                    />\r\n                    <video v-else-if=\"post.source_post.media[0].type === 'video'\" \r\n                      :src=\"post.source_post.media[0].url\" \r\n                      controls \r\n                    />\r\n                  </view>\r\n                </view>\r\n              </view>\r\n            </view>\r\n          </view>\r\n        </view>\r\n\r\n        <!-- 设备信息 -->\r\n        <view class=\"device_model\">\r\n            <text>{{ post.device_model }}</text>\r\n        </view>\r\n\r\n        <!-- 可见权限 -->\r\n        <view v-if=\"post.visibility=='仅我可见'\" class=\"visibility\">\r\n            <text>仅自己可见</text>\r\n        </view>\r\n\r\n      </view>\r\n\r\n      <!-- 帖子操作按钮 -->\r\n      <view class=\"post-actions\">\r\n        <view class=\"action like-action\" hover-class=\"none\" @tap=\"()=>like(post,post,null,null,0)\">\r\n          <image \r\n            :src=\"post.liked ? '/static/index/已赞.png' : '/static/index/赞.png'\" \r\n            class=\"action-icon\" \r\n            :class=\"{ 'like-heart-animated': post.liked }\" \r\n          />\r\n\r\n          <text>{{ post.like_count }}</text>\r\n        </view>\r\n        <view class=\"action\" hover-class=\"none\" @tap=\"()=>toggleComments(post)\">\r\n          <image src=\"/static/index/评论.png\" class=\"action-icon\" />\r\n          <text>{{ post.comment_count || 0 }}</text>\r\n        </view>\r\n        <view class=\"action\" @tap=\"()=>to_post(post,1)\">\r\n          <image src=\"/static/index/转发.png\" class=\"action-icon\" />\r\n          <text>{{ post.forward_count || 0 }}</text>\r\n        </view>\r\n      </view>\r\n      \r\n      <!-- 帖子评论 -->\r\n      <view v-if=\"post.showComments\" class=\"comments\">\r\n        <view v-for=\"(comment,commentIndex) in post.comments\" :key=\"comment._id\" class=\"comment\" @longpress.stop=\"handleLongPressComment_Reply(postIndex,commentIndex,null,post,comment)\">\r\n          <image :src=\"comment.avatar\" class=\"comment-avatar\" mode=\"aspectFill\" @tap=\"to_personal_info(comment)\" />\r\n          <view class=\"comment-content\">\r\n            <view class=\"comment-header\">\r\n              <view class=\"comment-info\">\r\n                <text class=\"comment-user\">{{ comment.username }}</text>\r\n                <text class=\"comment-meta\">{{ formatDate(comment.create_time) }} · {{ comment.ip }}</text>\r\n              </view>\r\n\r\n              <view class=\"comment-actions\">\r\n                <view class=\"like-action\" @tap.stop=\"()=>like(comment,post,comment,null,1)\">\r\n                  <image :src=\"comment.liked ? '/static/index/已赞.png' : '/static/index/赞.png'\" class=\"action-icon\" />\r\n                  <text>{{ comment.like_count }}</text>\r\n                </view>\r\n              </view>\r\n            </view>\r\n            <text class=\"comment-text\">{{ comment.content }}</text>\r\n\r\n            <view class=\"reply-action\" @tap.stop=\"()=>toggleReplyInput(comment)\">\r\n                  <text style=\"color:grey \">回复</text>\r\n            </view>\r\n\r\n            <!-- 回复comment-->\r\n            <view v-if=\"comment.showReplyInput\" class=\"reply-input-wrapper\">\r\n              <input\r\n                v-model=\"newReply\"\r\n                class=\"reply-input\"\r\n                :placeholder=\"'回复'+ comment.username + '...' \"\r\n              />\r\n              <button class=\"reply-button\" @tap=\"()=>submitComment(post,comment,null,1,newReply)\">回复</button>\r\n            </view>\r\n\r\n            <!-- 展示回复 -->\r\n            <view v-if=\"comment.replies.length && !comment.showReply\"  class=\"showReply\" @tap.stop=\"comment.showReply = true\">\r\n              <text>{{ comment.replies.length }}条回复</text>  \r\n            </view>\r\n\r\n            <!-- 回复列表 -->\r\n            <view v-if=\"comment.showReply\">\r\n              <view v-for=\"(reply,replyIndex) in comment.replies\" :key=\"reply._id\" class=\"reply\" @longpress.stop=\"handleLongPressComment_Reply(postIndex,commentIndex,replyIndex,comment,reply)\">\r\n              <image :src=\"reply.avatar\" class=\"reply-avatar\" mode=\"aspectFill\" @tap=\"to_personal_info(reply)\" />  \r\n                <view class=\"reply-content\">\r\n                  <view class=\"reply-header\">\r\n                    <view class=\"reply-info\">\r\n                      <text class=\"reply-user\">{{ reply.username }}</text>\r\n                      <text class=\"reply-meta\">{{ formatDate(reply.create_time) }} · {{ reply.ip }}</text>\r\n                    </view>\r\n                    <view class=\"reply-action\">\r\n                      <view class=\"reply-like-action\" @tap.stop=\"()=>like(reply,post,comment,reply,2)\">\r\n                        <image :src=\"reply.liked ? '/static/index/已赞.png' : '/static/index/赞.png'\" class=\"action-icon\" />\r\n                        <text>{{ reply.like_count }}</text>\r\n                      </view>\r\n                    </view>\r\n                  </view>\r\n\r\n                  <!-- 评论内容 -->\r\n                  <text class=\"reply-text\">\r\n                    <text v-if=\"reply.reply_username\">\r\n                      回复\r\n                      <text class=\"relpy_username\">{{ reply.reply_username }}: </text>\r\n                    </text>\r\n                    {{ reply.content }}\r\n                  </text>\r\n\r\n                  <!--回复按钮-->\r\n                  <view class=\"reply-action\" @tap.stop=\"()=>toggleReplyInput(reply)\">\r\n                    <text>回复</text>\r\n                  </view>\r\n\r\n                  <!-- 回复输入框 --><!-- 回复reply -->\r\n                  <view v-if=\"reply.showReplyInput\" class=\"reply-input-wrapper\">\r\n                    <input\r\n                      v-model=\"newReplyReply\"\r\n                      class=\"reply-input\"\r\n                      :placeholder=\" '回复' + reply.username + '...' \"\r\n                    />\r\n                    <button class=\"reply-button\" @tap=\"()=>submitComment(post,comment,reply,2,newReplyReply)\">回复</button>\r\n                  </view>\r\n\r\n                </view>\r\n\r\n              </view>\r\n            </view>\r\n            \r\n          </view>\r\n        </view>\r\n\r\n        <!--评论输入框--><!-- 回复post -->\r\n        <view class=\"comment-input-wrapper\" @tap.stop>\r\n          <input\r\n            v-model=\"newComment\"\r\n            class=\"comment-input\"\r\n            placeholder=\"发表评论...\"\r\n          />\r\n          <button class=\"reply-button\" @tap=\"()=>submitComment(post,null,null,0,newComment)\">回复</button>\r\n        </view>\r\n      </view>\r\n    </view>\r\n\r\n    <!-- 加载中状态 -->\r\n    <view class=\"loading-box\" v-if=\"loading && !loaded\">\r\n      <view class=\"spinner\"></view>\r\n      <text class=\"loading-text\">加载中...</text>\r\n    </view>\r\n\r\n    <!-- 加载完成 -->\r\n    <view class=\"loaded-box\" v-if=\"loaded && !loading\">\r\n      <text class=\"loaded-text\">加载完成</text>\r\n    </view>\r\n  </view>\r\n</template>\r\n\r\n<script>\r\nimport PubSub from 'pubsub-js';\r\nexport default {\r\n  data() {\r\n    return {\r\n      searchQuery: '',\r\n      posts: [\r\n      ],\r\n      filteredPosts: [],\r\n      newComment: '',\r\n      newReply: '',\r\n      newReplyReply: '',\r\n      user: {\r\n        account_id: '',\r\n        username: '未登录',\r\n        description: '这个人很懒，什么都没有留下',\r\n        avatar: '/static/info/头像.png',\r\n        admin:false, // 是否为管理员\r\n        ip: '未知',\r\n      },\r\n      replyPlaceholder: '发表评论...', // 回复框的占位符\r\n      last_showInput: null, // 记录上一个显示的输入框\r\n      loading: false, // 是否正在加载更多帖子\r\n      loaded: false,\r\n      token: '', // 用于订阅\r\n      lastScrollTop: 0,\r\n      show_top_bar: true, // 控制顶部栏的显示与隐藏\r\n      isAtTop: true, // 是否滚动到顶部\r\n    };\r\n  },\r\n  watch: {\r\n    posts: {\r\n      deep: true, // 深度监听 posts 数组\r\n      handler() {\r\n        this.filteredPosts = this.posts; // 更新过滤后的帖子列表\r\n        this.filterPosts(); // 过滤帖子\r\n      }\r\n    },\r\n    'user.account_id': {\r\n      handler() {\r\n        this.posts = []; // 清空帖子列表\r\n        // console.log('watch用户信息更新:', this.user);\r\n        this.fetchPosts(null,false); // 调用加载更多帖子的方法\r\n      }\r\n    }\r\n  },\r\n  onShow(){\r\n    const app = getApp();\r\n    if(app.userInfo) {\r\n      if(app.userInfo.account_id !== this.user.account_id){\r\n        this.user = app.userInfo; // 更新用户信息\r\n        console.log('onShow用户信息更新:', this.user);\r\n      }\r\n    }\r\n  },\r\n  async onLoad() {\r\n\r\n    const uid = uni.getStorageSync('uid'); // 获取本地存储的用户 ID\r\n    if(uid){\r\n      await this.login_register('login',uid,'','',true);\r\n    }\r\n    else{\r\n      this.posts = [];\r\n      this.fetchPosts(null,false); // 调用加载更多帖子的方法\r\n    }\r\n\r\n    this.token = PubSub.subscribe('return_index', (msg, data) => {\r\n      this.posts.unshift(data); // 将新帖子添加到列表开头\r\n      PubSub.publish('update_activity', 20); // 发布更新事件\r\n    });\r\n    \r\n    uni.$on('return_from_source_post',(post_id)=>{\r\n      this.posts = this.posts.filter(post => post._id !== post_id);\r\n    })\r\n    \r\n  },\r\n  onUnload() {\r\n    if(this.token){\r\n      PubSub.unsubscribe(this.token);\r\n      this.token = null;\r\n    }\r\n    uni.$off('return_from_source_post');\r\n  },\r\n  onReachBottom() {\r\n    // 页面滚动到底部时加载更多帖子\r\n    if(this.loading) return; // 如果正在加载或没有更多帖子，直接返回\r\n    this.loading = true; // 设置加载状态\r\n    this.loaded = false; // 设置加载完成状态为 false\r\n    let post = this.posts.length > 0 ? this.posts[this.posts.length - 1] : null; // 获取最后一个帖子\r\n    this.fetchPosts(post,true).finally(() => {\r\n        this.loading = false; \r\n        this.loaded = true; \r\n        setTimeout(() => {\r\n          this.loaded = false; // 重置加载完成状态\r\n        }, 2000); // 2秒后重置加载完成状态\r\n    }); // 调用加载更多帖子的方法\r\n  },\r\n  onPullDownRefresh() {\r\n    if(this.loading) return; // 如果正在加载或没有更多帖子，直接返回\r\n    this.posts = []; // 清空帖子列表\r\n    this.fetchPosts(null, false).finally(() => {\r\n      uni.stopPullDownRefresh(); // 停止下拉刷新\r\n    }); \r\n  },\r\n  onPageScroll(e){\r\n    const current = e.scrollTop;\r\n    if(current === 0){\r\n      this.isAtTop = true;\r\n    }\r\n    else{\r\n      this.isAtTop = false;\r\n    }\r\n    // 向上滑动显示，向下隐藏\r\n    if (current <= this.lastScrollTop) {\r\n      this.show_top_bar = true;\r\n    } \r\n    else {\r\n      this.show_top_bar = false;\r\n    }\r\n    this.lastScrollTop = current;\r\n  },\r\n  methods: {\r\n    //加载更多帖子\r\n    async fetchPosts(post,lt) {\r\n      try {\r\n        // 调用云函数获取帖子\r\n        const res = await uniCloud.callFunction({\r\n          name: 'get_posts',\r\n          data: {\r\n            post_create_time: post ? post.create_time : null, // 传递最后一个帖子的 ID\r\n            page_size: 5, // 每页显示的帖子数量\r\n            lt: lt,\r\n            account_id: this.user.account_id,\r\n          }\r\n        });\r\n\r\n        // 判断云函数是否成功返回数据\r\n        if (res.result.code === 0) {\r\n          // 成功获取帖子\r\n          const { posts } = res.result.data;\r\n          console.log('获取帖子成功:', posts);\r\n          this.posts = [...this.posts, ...posts];\r\n        } else {\r\n          console.error('获取帖子失败:', res.result.msg);\r\n        }\r\n      } catch (error) {\r\n        console.error('获取帖子时发生错误:', error);\r\n      }\r\n    },\r\n    // 过滤帖子\r\n    filterPosts() {\r\n      this.filteredPosts = this.posts.filter(post => {\r\n        const query = this.searchQuery.trim().toLowerCase();\r\n        // 检查主帖内容和用户名，确保属性存在\r\n        const matchesMain = (post.content && post.content.toLowerCase().includes(query)) ||\r\n                          (post.username && post.username.toLowerCase().includes(query));\r\n        \r\n        // 如果是转发帖，检查源帖内容和用户名，确保属性存在\r\n        const matchesSource = post.post_type === 1 && \r\n                            ((post.source_post?.content && post.source_post.content.toLowerCase().includes(query)) || \r\n                             (post.source_post?.username && post.source_post.username.toLowerCase().includes(query)));\r\n        \r\n        return matchesMain || matchesSource;\r\n      });\r\n    },\r\n    // 预览媒体\r\n    previewMedia(media, currentIndex) {\r\n      uni.previewMedia({\r\n        sources: media.map(item => ({\r\n          url: item.url,\r\n          type: item.type\r\n        })),\r\n        current: currentIndex, // 当前预览的媒体索引\r\n      });\r\n    },\r\n    //跳转到发帖页面\r\n    to_post(post, type) {\r\n      let share_post = {}\r\n      if (post) { // 如果是转发帖子{\r\n        if (post.post_type == 1 && post.source_post) {\r\n          share_post = post.source_post; // 获取原帖信息\r\n        }\r\n        else {\r\n          share_post = post; // 获取当前帖子信息\r\n        }\r\n      }\r\n      uni.navigateTo({ \r\n        url: '/pages/post/post' ,\r\n        success: () => {\r\n          PubSub.publish('to_post', {\r\n            share_post: share_post,\r\n            type: type,\r\n            account_id: this.user.account_id,\r\n            username: this.user.username,\r\n            avatar: this.user.avatar\r\n          })\r\n        }\r\n      });\r\n      // this.getUserLocation();\r\n    },\r\n    // 确认删除帖子\r\n    confirmDeletePost(post) {\r\n      uni.showModal({\r\n        title: '确认删除',\r\n        content: '确定要删除这条帖子吗？',\r\n        success: (res) => {\r\n          if (res.confirm) {\r\n            this.deletePost(post); // 调用删除函数\r\n          }\r\n        }\r\n      });\r\n    },\r\n    //删除帖子\r\n    async deletePost(post) {\r\n      \r\n      uni.showToast({\r\n        title:'删除中',\r\n        icon:'loading'\r\n      })\r\n      \r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'delete_post',\r\n          data: { \r\n            post_id: post._id,\r\n            account_id: post.account_id,\r\n          }\r\n        });\r\n        \r\n        if (res.result.code === 200) {\r\n          uni.hideToast();\r\n          uni.showToast({ title: '删除成功', icon: 'success' });\r\n          this.posts = this.posts.filter(p => p._id !== post._id); // 从列表中移除已删除的帖子\r\n        } else {\r\n          uni.showToast({ title: '删除失败', icon: 'none' });\r\n        }\r\n      } catch (error) {\r\n        console.error('删除失败:', error);\r\n        uni.showToast({ title: '网络错误', icon: 'none' });\r\n      }finally{\r\n        uni.hideToast();\r\n      }\r\n    },\r\n    //点赞\r\n    async like(item, post, comment, reply, type) {\r\n      if (!this.user.account_id) {\r\n        uni.showToast({ title: '请登录', icon: 'none' });\r\n        return;\r\n      }\r\n      item.liked = !item.liked; // 切换点赞状态\r\n      item.like_count += item.liked ? 1 : -1;\r\n      await this.getUserLocation();\r\n      await this.resolve_ip();\r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'user-liked',\r\n          data: {\r\n            target_id: item._id,\r\n            post: post,\r\n            comment: comment,\r\n            reply: reply,\r\n            account_id: this.user.account_id,\r\n            type: type,\r\n            ip: this.user.ip\r\n          }\r\n        });\r\n        \r\n        if(res.result.msg === \"请登录\"){\r\n          uni.showToast({\r\n            title: '请登录',\r\n            icon: 'none'\r\n          });\r\n        }\r\n        else if(res.result.msg != \"success\") {\r\n          item.liked = !item.liked; // 还原点赞状态\r\n          item.like_count -= item.liked ? -1 : 1;\r\n          uni.showToast({\r\n            title: res.result.message || '操作失败',\r\n            icon: 'none'\r\n          });\r\n        }\r\n        else if(res.result.first){\r\n          PubSub.publish('update_activity', 5);\r\n        }\r\n      } catch (err) {\r\n        console.error('点赞失败:', err);\r\n        uni.showToast({\r\n          title: '网络错误',\r\n          icon: 'none'\r\n        });\r\n      }\r\n    },\r\n    //展示评论\r\n    toggleComments(selectedPost) {\r\n      this.filteredPosts.forEach(post => {\r\n        if (post._id === selectedPost._id) {\r\n          post.showComments = !post.showComments; // 切换当前帖子的评论显示状态\r\n        } else {\r\n          post.showComments = false; // 收起其他帖子的评论\r\n        }\r\n      });\r\n      \r\n      if(!selectedPost.comments){\r\n      this.fetchComments(selectedPost); // 获取当前帖子的评论\r\n      }\r\n    },\r\n    //获取评论\r\n    async fetchComments(post) {\r\n      // console.log('post.comment_count',post.comment_count)\r\n      try{\r\n        const res = await uniCloud.callFunction({\r\n          name: 'get_comments',\r\n          data: {\r\n            post_id: post._id // 传递帖子 ID\r\n          } \r\n        });\r\n        \r\n        if(res.result.msg == \"success\"){\r\n          post.comments = res.result.data; // 更新评论列表 \r\n          post.comment_count = post.comments.length; // 更新评论数量\r\n          if(this.user.account_id){//如果用户已登录，获取用户点赞状态\r\n            const db = uniCloud.database();\r\n            const likeRes = await db.collection('user-liked').where({\r\n              account_id: this.user.account_id,\r\n              target_id: db.command.in(post.comments.map(item => item._id)),\r\n              liked: true \r\n            }).get();\r\n            const likedCommentIds = likeRes.result.data.map(item => item.target_id);\r\n            let replies = [];\r\n            for (const comment of post.comments) {\r\n              comment.liked = likedCommentIds.includes(comment._id);\r\n              replies = replies.concat(comment.replies);\r\n            }\r\n            if(replies.length>0){\r\n              const likeRes = await db.collection('user-liked').where({\r\n                account_id: this.user.account_id,\r\n                target_id: db.command.in(replies.map(item => item._id)),\r\n                liked: true\r\n              }).get();\r\n              const likedReplyIds = likeRes.result.data.map(item => item.target_id);\r\n              post.comments.forEach(comment => {\r\n                comment.replies.forEach(reply => {\r\n                  reply.liked = likedReplyIds.includes(reply._id);\r\n                });\r\n              });\r\n            }\r\n          }\r\n        }\r\n      }catch (error) {\r\n        console.error('获取评论失败:', error);\r\n      }\r\n    },   \r\n    // 提交评论或回复\r\n    async submitComment(post,comment,reply,type,content) {\r\n      if ((!this.newComment.trim() && type==0) || (!this.newReply.trim() && type==1) || (!this.newReplyReply.trim() && type==2)) {\r\n        uni.showToast({ title: '评论不能为空', icon: 'none' });\r\n        return;\r\n      }\r\n      if(!this.user.account_id){\r\n        uni.showToast({ title: '请登录', icon: 'none' });\r\n        return;\r\n      }\r\n      \r\n      uni.showToast({\r\n        title: '评论中...',\r\n        icon: 'loading'\r\n      })\r\n      \r\n      await this.getUserLocation();\r\n      await this.resolve_ip();\r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'submit_comment',\r\n          data:{\r\n            user:this.user,\r\n            post: post,\r\n            comment: comment,\r\n            reply:reply,\r\n            type: type,\r\n            content: content,\r\n          } \r\n        });\r\n\t\t    \r\n        if(res.result.msg == \"success\"){\r\n          if(type==0){\r\n            post.comment_count += 1; // 更新评论数量\r\n            post.comments.unshift(res.result.data);\r\n            this.newComment = ''; // 清空输入框\r\n          } \r\n          else{\r\n            comment.replies.unshift(res.result.data);\r\n            if(reply){\r\n              this.newReplyReply = '',\r\n              reply.showReplyInput=false; // 清空输入框\r\n            }\r\n            else{\r\n              this.newReply = '',\r\n              comment.showReplyInput=false; // 清空输入框\r\n            }\r\n            loading = false\r\n          }\r\n          uni.hideToast();\r\n          uni.showToast({ title: '评论成功', icon: 'success' });\r\n          PubSub.publish('update_activity', 10);\r\n        } \r\n      }catch (error) {\r\n        uni.showToast({ title: '评论失败', icon: 'none' }); \r\n      }finally{\r\n        uni.hideToast();\r\n      }\r\n    },\r\n    //获取用户ip地址\r\n    async getUserLocation() {\r\n      try {\r\n          const res = await uniCloud.callFunction({\r\n              name: 'get_ip',\r\n              data: {}\r\n          })\r\n          // console.log('res',res)\r\n          if(res.result.code === 200){\r\n            this.user.ip = res.result.data; // 设置用户的 IP 地址\r\n          }\r\n      }catch(e){\r\n          console.error('获取位置失败', e);\r\n      }\r\n    },\r\n    //解析ip地址\r\n    async resolve_ip(){\r\n        const host = \"https://ipcity.market.alicloudapi.com\";  // 请求地址 支持http 和 https 及 WEBSOCKET\r\n        const path = \"/ip/city/query\";   // 后缀\r\n        const appCode = \"1dc84a4fe7fc40238d1a17ad665c59d3\"; \r\n        // 构建查询参数\r\n        const querys = `ip=${encodeURIComponent(this.user.ip)}&coordsys=WGS84`;\r\n        const urlSend = `${host}${path}?${querys}`;   // 拼接完整请求链接\r\n          try {\r\n          const res = await uni.request({\r\n                        url: urlSend,\r\n                        method: 'GET',\r\n                        header: {\r\n                          \"Authorization\": `APPCODE ${appCode}`\r\n                        }\r\n                      });\r\n          if (res.statusCode === 200) {\r\n            if(res.data.code == 200){\r\n              let city;\r\n              if(res.data.data.result.city){\r\n                city=res.data.data.result.city;\r\n              }\r\n              else if(res.data.data.result.prov){\r\n                city=res.data.data.result.province;\r\n              }\r\n              else if(res.data.data.result.country){\r\n                city=res.data.data.result.country;\r\n              }\r\n              else if(res.data.data.result.continuent){\r\n                city=res.data.data.result.continent;\r\n              }\r\n              if(city.endsWith('市')){\r\n                city=city.slice(0,-1)\r\n              }\r\n              else if(city.endsWith('省')){\r\n                city=city.slice(0,-1)\r\n              }\r\n              this.user.ip = city; // 设置用户的 IP 地址\r\n              console.log('获取到的IP地址',this.user.ip)\r\n            }\r\n          }\r\n        } catch (err) {\r\n          console.error('resolve_ip 请求失败:', err);\r\n        }\r\n    },\r\n    // 长按评论或回复处理\r\n    handleLongPressComment_Reply(postIndex,commentIndex,replyIndex,parent,item){\r\n      if(item.account_id && item.account_id !== this.user.account_id && !this.user.admin) {\r\n        return;\r\n      }\r\n      uni.showActionSheet({\r\n        itemList: ['删除'],\r\n        success: (res) => {\r\n          // 点击了“删除”\r\n          if (res.tapIndex === 0) {\r\n            uni.showModal({\r\n              title: '确认删除',\r\n              content: '确定要删除这条评论吗？',\r\n              success: (res) => {\r\n                if (res.confirm) {\r\n                  this.deleteComment_Reply(postIndex,commentIndex,replyIndex,parent, item); // 删除操作\r\n                }\r\n              }\r\n            });\r\n          }\r\n        }\r\n      });\r\n    },\r\n    // 删除评论或回复\r\n    async deleteComment_Reply(postIndex,commentIndex,replyIndex,parent,item) {\r\n      uni.showToast({\r\n        title: '删除中...',\r\n        icon: 'loading'\r\n      })\r\n      try {\r\n        const res = await uniCloud.callFunction({\r\n          name: 'delete_comment_reply',\r\n          data: { \r\n            parent: parent,\r\n            item: item\r\n          }\r\n        });\r\n        \r\n        if (res.result.code === 200) {\r\n          uni.hideToast(); // 隐藏加载提示\r\n          uni.showToast({ title: '删除成功', icon:'success' }); \r\n          if(!('post_id' in item)) {//item是reply\r\n            console.log('replies',res.result.data.replies)\r\n            this.$set(this.posts[postIndex].comments[commentIndex],'replies',res.result.data.replies);\r\n          }\r\n          else{//item是comment\r\n            this.posts[postIndex].comments.splice(commentIndex, 1); // 从评论列表中移除已删除的评论\r\n            this.posts[postIndex].comment_count -= 1; // 更新评论数量\r\n          }\r\n        }\r\n      }catch (error) {\r\n        console.error('删除失败:', error);\r\n        uni.showToast({ title: '网络错误', icon: 'none' });\r\n      }finally{\r\n        uni.hideToast(); // 隐藏加载中提示\r\n      }\r\n    },\r\n    //转到原帖页\r\n    to_source_post(post){\r\n        uni.navigateTo({\r\n          url: `/pages/source_post/source_post?post_id=${post.source_post.post_id}&account_id=${this.user.account_id}&admin=${this.user.admin}&username=${this.user.username}&avatar=${this.user.avatar}`,\r\n        });\r\n    },\r\n    //转到个人信息页\r\n    to_personal_info(item){\r\n        uni.navigateTo({\r\n          url: `/pages/personal_info/personal_info?account_id=${item.account_id}&visitor_account_id=${this.user.account_id}&visitor_admin=${this.user.admin}`,\r\n        });\r\n    },\r\n    //时间格式化函数\r\n    formatDate(create_time) {\r\n      create_time= new Date(create_time);\r\n      const pad = n => n.toString().padStart(2, '0');\r\n      const year = create_time.getFullYear();\r\n      const month = pad(create_time.getMonth() + 1);\r\n      const day = pad(create_time.getDate());\r\n      const hours = pad(create_time.getHours());\r\n      const minutes = pad(create_time.getMinutes());\r\n      return `${year}-${month}-${day} ${hours}:${minutes}`;\r\n    },\r\n    // 切换回复输入框的显示状态\r\n    toggleReplyInput(item) {\r\n      this.$set(item, 'showReplyInput', !item.showReplyInput);\r\n      if(this.last_showInput && this.last_showInput !== item) {\r\n        this.last_showInput.showReplyInput = false; // 隐藏上一个输入框\r\n      }\r\n      this.last_showInput = item; // 更新上一个输入框\r\n    },\r\n    // 登录\r\n    async login_register(action, account_id, username,password, has_token) {\r\n\t\t\tconst res = await uniCloud.callFunction({\r\n\t\t\t\tname: 'login_register',\r\n\t\t\t\tdata: {\r\n\t\t\t\t\taction,\r\n\t\t\t\t\taccount_id,\r\n\t\t\t\t\tusername,\r\n\t\t\t\t\tpassword,\r\n\t\t\t\t\thas_token\r\n\t\t\t\t}\r\n\t\t\t});\r\n      if (res.result.code === 200) {\r\n\t\t\t\tuni.showToast({title: '已登录',icon:'success'});\r\n        const app = getApp();\r\n        app.userInfo = res.result.userInfo; // 更新全局用户信息\r\n        app.login_status = true; // 更新登录状态\r\n\t\t\t\tObject.keys(res.result.userInfo).forEach((key) => {\r\n            this.user[key] = res.result.userInfo[key]; // 更新本地用户信息\r\n        });\r\n        if(this.user.unread_messages){\r\n          uni.showTabBarRedDot({\r\n            index: 1,\r\n          });\r\n        }\r\n\t\t\t\tuni.setStorageSync('uid', res.result.userInfo.account_id);\r\n\t\t\t}\r\n      else{\r\n        this.posts = [];\r\n        this.fetchPosts(null,false); // 调用加载更多帖子的方法\r\n        uni.removeStorageSync('uid');\r\n      }\r\n\t\t},\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n@import url(index.css);\r\n</style>","import MiniProgramPage from 'D:/CODE/vue/canteen_program/pages/index/index.vue'\nwx.createPage(MiniProgramPage)"],"names":["uni","PubSub","uniCloud","likeRes","res"],"mappings":"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"}